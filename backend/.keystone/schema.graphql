input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input DeviceRelateToOneInput {
  create: DeviceCreateInput
  connect: DeviceWhereUniqueInput
  disconnect: DeviceWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Attempt {
  id: ID!
  confidence: Int
  threshold: Int
  result: String
  scanTime: String
  user: User
  device: Device
}

input AttemptWhereInput {
  AND: [AttemptWhereInput]
  OR: [AttemptWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  confidence: Int
  confidence_not: Int
  confidence_lt: Int
  confidence_lte: Int
  confidence_gt: Int
  confidence_gte: Int
  confidence_in: [Int]
  confidence_not_in: [Int]
  threshold: Int
  threshold_not: Int
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  threshold_in: [Int]
  threshold_not_in: [Int]
  scanTime: String
  scanTime_not: String
  scanTime_lt: String
  scanTime_lte: String
  scanTime_gt: String
  scanTime_gte: String
  scanTime_in: [String]
  scanTime_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  device: DeviceWhereInput
  device_is_null: Boolean
}

input AttemptWhereUniqueInput {
  id: ID!
}

enum SortAttemptsBy {
  id_ASC
  id_DESC
  confidence_ASC
  confidence_DESC
  threshold_ASC
  threshold_DESC
  scanTime_ASC
  scanTime_DESC
  user_ASC
  user_DESC
  device_ASC
  device_DESC
}

input AttemptUpdateInput {
  confidence: Int
  threshold: Int
  scanTime: String
  user: UserRelateToOneInput
  device: DeviceRelateToOneInput
}

input AttemptsUpdateInput {
  id: ID!
  data: AttemptUpdateInput
}

input AttemptCreateInput {
  confidence: Int
  threshold: Int
  scanTime: String
  user: UserRelateToOneInput
  device: DeviceRelateToOneInput
}

input AttemptsCreateInput {
  data: AttemptCreateInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

input AttemptRelateToManyInput {
  create: [AttemptCreateInput]
  connect: [AttemptWhereUniqueInput]
  disconnect: [AttemptWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Device {
  id: ID!
  name: String
  description: String
  threshold: Int
  users(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User!]!
  _usersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  attempts(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): [Attempt!]!
  _attemptsMeta(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input DeviceWhereInput {
  AND: [DeviceWhereInput]
  OR: [DeviceWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  threshold: Int
  threshold_not: Int
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  threshold_in: [Int]
  threshold_not_in: [Int]

  """ condition must be true for all nodes """
  users_every: UserWhereInput

  """ condition must be true for at least 1 node """
  users_some: UserWhereInput

  """ condition must be false for all nodes """
  users_none: UserWhereInput

  """ condition must be true for all nodes """
  attempts_every: AttemptWhereInput

  """ condition must be true for at least 1 node """
  attempts_some: AttemptWhereInput

  """ condition must be false for all nodes """
  attempts_none: AttemptWhereInput
}

input DeviceWhereUniqueInput {
  id: ID!
}

enum SortDevicesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  threshold_ASC
  threshold_DESC
  users_ASC
  users_DESC
  attempts_ASC
  attempts_DESC
}

input DeviceUpdateInput {
  name: String
  description: String
  threshold: Int
  users: UserRelateToManyInput
  attempts: AttemptRelateToManyInput
}

input DevicesUpdateInput {
  id: ID!
  data: DeviceUpdateInput
}

input DeviceCreateInput {
  name: String
  description: String
  threshold: Int
  users: UserRelateToManyInput
  attempts: AttemptRelateToManyInput
}

input DevicesCreateInput {
  data: DeviceCreateInput
}

input DeviceRelateToManyInput {
  create: [DeviceCreateInput]
  connect: [DeviceWhereUniqueInput]
  disconnect: [DeviceWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  createdAt: String
  devices(where: DeviceWhereInput, search: String, sortBy: [SortDevicesBy!], orderBy: String, first: Int, skip: Int): [Device!]!
  _devicesMeta(where: DeviceWhereInput, search: String, sortBy: [SortDevicesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  attempts(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): [Attempt!]!
  _attemptsMeta(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  createdAt: String
  createdAt_not: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdAt_in: [String]
  createdAt_not_in: [String]

  """ condition must be true for all nodes """
  devices_every: DeviceWhereInput

  """ condition must be true for at least 1 node """
  devices_some: DeviceWhereInput

  """ condition must be false for all nodes """
  devices_none: DeviceWhereInput

  """ condition must be true for all nodes """
  attempts_every: AttemptWhereInput

  """ condition must be true for at least 1 node """
  attempts_some: AttemptWhereInput

  """ condition must be false for all nodes """
  attempts_none: AttemptWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  devices_ASC
  devices_DESC
  attempts_ASC
  attempts_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: String
  devices: DeviceRelateToManyInput
  attempts: AttemptRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: String
  devices: DeviceRelateToManyInput
  attempts: AttemptRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all Attempt items which match the where clause. """
  allAttempts(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): [Attempt]

  """ Search for the Attempt item with the matching ID. """
  Attempt(where: AttemptWhereUniqueInput!): Attempt

  """ Perform a meta-query on all Attempt items which match the where clause. 
  """
  _allAttemptsMeta(where: AttemptWhereInput, search: String, sortBy: [SortAttemptsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Attempt list. """
  _AttemptsMeta: _ListMeta

  """ Search for all Device items which match the where clause. """
  allDevices(where: DeviceWhereInput, search: String, sortBy: [SortDevicesBy!], orderBy: String, first: Int, skip: Int): [Device]

  """ Search for the Device item with the matching ID. """
  Device(where: DeviceWhereUniqueInput!): Device

  """ Perform a meta-query on all Device items which match the where clause. 
  """
  _allDevicesMeta(where: DeviceWhereInput, search: String, sortBy: [SortDevicesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Device list. """
  _DevicesMeta: _ListMeta

  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single Attempt item. """
  createAttempt(data: AttemptCreateInput): Attempt

  """ Create multiple Attempt items. """
  createAttempts(data: [AttemptsCreateInput]): [Attempt]

  """ Update a single Attempt item by ID. """
  updateAttempt(id: ID!, data: AttemptUpdateInput): Attempt

  """ Update multiple Attempt items by ID. """
  updateAttempts(data: [AttemptsUpdateInput]): [Attempt]

  """ Delete a single Attempt item by ID. """
  deleteAttempt(id: ID!): Attempt

  """ Delete multiple Attempt items by ID. """
  deleteAttempts(ids: [ID!]): [Attempt]

  """ Create a single Device item. """
  createDevice(data: DeviceCreateInput): Device

  """ Create multiple Device items. """
  createDevices(data: [DevicesCreateInput]): [Device]

  """ Update a single Device item by ID. """
  updateDevice(id: ID!, data: DeviceUpdateInput): Device

  """ Update multiple Device items by ID. """
  updateDevices(data: [DevicesUpdateInput]): [Device]

  """ Delete a single Device item by ID. """
  deleteDevice(id: ID!): Device

  """ Delete multiple Device items by ID. """
  deleteDevices(ids: [ID!]): [Device]

  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
